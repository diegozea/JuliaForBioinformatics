var documenterSearchIndex = {"docs":
[{"location":"#JuliaForBioinformatics.jl-1","page":"Home","title":"JuliaForBioinformatics.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [JuliaForBioinformatics]","category":"page"},{"location":"#JuliaForBioinformatics.show_type_tree","page":"Home","title":"JuliaForBioinformatics.show_type_tree","text":"Recursive function to print the type tree for a given type, including its supertype and all its subtypes.\n\n\n\n\n\n","category":"function"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For the first and second day of the workshop you need to install:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Julia 1.1  \nJuno, the atom based IDE.\nThis package with the IJulia notebooks we are going to use:  ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Pkg\npkg\"add https://github.com/diegozea/JuliaForBioinformatics.git\"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"IJulia:  ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Pkg\npkg\"add IJulia\"","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"EditURL = \"https://github.com/diegozea/JuliaForBioinformatics/blob/master/src/Introduction/01_Introduction.jl\"","category":"page"},{"location":"01_Introduction/#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"(Image: ) (Image: )","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"Let's start with a classic:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"message = \"Hello World!\"","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"println(message)","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"Julia is a general purpose programming language designed with scientific computing and mathematics in mind. For this reason, some Julia expressions look like mathematics.","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"For example, let's write a Julia function to calculate a circle’s circumference C as a function of the radius r:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"C = 2 pi r","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"r = 10\n\nC = 2π*r","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"π is one of the mathematical constants defined in Julia. You can write π by typing \\pi and pressing <TAB> in the REPL:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"π","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"pi","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"The multiplication operator * is not needed when a literal number (e.g. 2) is placed just before a variable or constant (e.g. π), see Numeric Literal Coefficients. That makes polynomial expressions much cleaner:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"f(x) = 1.56 + 2.24x + 3.47x^2","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"f(0.04)","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"This one-line function definition, i.e. function_name(arguments) = body, is the simplest we can use in Julia.","category":"page"},{"location":"01_Introduction/#Exercise-1-1","page":"Introduction","title":"Exercise 1","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"Define an one-line function to calculate the length of the  hypotenuse of a right-angled triangle with catheti (legs) a and b as sqrta^2 + b^2 using the sqrt() function:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"# hypotenuse(...","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"If your solution is correct, the following test should pass without errors.","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"using Test","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"The Test module exports the @test macro, useful for writing unit tests of the code. We are going to use ≈, \\approx<TAB>, (a ≈ b or isapprox(a, b)) test if two values can be equal taking into account floating point errors. :","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"@test hypotenuse(2, 5) ≈ hypot(2, 5)","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"In real life, you can use the function hypot to avoid underflow and overflow problems.","category":"page"},{"location":"01_Introduction/#Control-Flow-1","page":"Introduction","title":"Control Flow","text":"","category":"section"},{"location":"01_Introduction/#if-1","page":"Introduction","title":"if","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"distance = hypot(1.0, 3.0, 2.5)","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"if distance <= 2.08  # Å\n    \"Disulphide\"\nelseif distance <= 6  # Å\n    \"Contact\"\nelse\n    \"Not interacting\"\nend","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"Each condition should be a boolean variable (true or false) or an expression that evaluates to a boolean value.","category":"page"},{"location":"01_Introduction/#Short-circuit-evaluation-1","page":"Introduction","title":"Short-circuit evaluation","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"condition = true\ncondition && println(\"It's true!\")","category":"page"},{"location":"01_Introduction/#Exercise-2-1","page":"Introduction","title":"Exercise 2","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"Can you write the equivalent expression using if ?","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"# if ...","category":"page"},{"location":"01_Introduction/#Ternary-operator-1","page":"Introduction","title":"Ternary operator","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"condition = true\nresult = condition ? \"👍\" : \"👎\"","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"This is equivalent to:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"result = if condition\n        \"👍\"\n    else\n        \"👎\"\nend","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"result","category":"page"},{"location":"01_Introduction/#for-loops-1","page":"Introduction","title":"for loops","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"dna = \"ATGCAT\"  # dna is a string\n\nfor base in dna\n    println(base)  # base is a character\nend","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"for base = dna and for base ∈ dna are also a possible notations, i.e. using = or ∈ instead of in:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"for base ∈ dna\n    println(base)\nend","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"Julia has a nice unicode support and unicode characters can be used in variables names, operators, etc. You can write ∈ in the REPL by typing \\in and pressing the <TAB> key.","category":"page"},{"location":"01_Introduction/#Functions-1","page":"Introduction","title":"Functions","text":"","category":"section"},{"location":"01_Introduction/#One-line-syntax-1","page":"Introduction","title":"One-line syntax","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"\"Return the number of codons in the sequence.\"\ncodon_number(seq) = div(length(seq), 3) # This is a Julia comment","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"A strings before the function declaration is used as docstring. You can access the function documentation by typing ? in the REPL and the name of the function, e.g.: ?codon_number","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"# Try to look at the documentation of condon_number","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"codon_number(dna)","category":"page"},{"location":"01_Introduction/#Multi-line-syntax-1","page":"Introduction","title":"Multi-line syntax","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"Functions with longer bodies are defined using the function keyword:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"\"Returns the GC number in a given sequence.\"\nfunction count_gc(string)\n    count = 0\n    for char in string\n        if char == 'C' || char == 'G'  # || is the short-circuiting or.\n            # ' ' (instead of \" \") is used to define a character.\n            count += 1  # i.e. count = count + 1\n        end\n    end\n    count  # i.e. return count\nend","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"count_gc(dna)","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"By default, a function returns the result of the last evaluated expression, count in the previous example. Otherwise, the keyword return should be used:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"\"\"\"\n`is_dna` iterates a string and returns:\n- `false` if a character different from **A, C, T or G** is found\n- `true` otherwise\n\"\"\"\nfunction is_dna(string)\n    for char in string\n        if char != 'A' && char != 'C' && char != 'T' && char != 'G'\n            return false\n        end\n    end\n    true\nend","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"is_dna(\"ACHL\")","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"Here, the return keyword is used inside the loop to return false as soon as an incorrect character is found.","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"\"\"\" defines multiline strings. In this example, the multiline string is the documentation string of the function. Markdown syntax can be used in docstrings.","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"?is_dna","category":"page"},{"location":"01_Introduction/#Exercise-3-1","page":"Introduction","title":"Exercise 3","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"Write a function that returns true if the given string (argument) has at least one N using the keywords function, for, if and return.","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"# has_n(...","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"@testset is useful to aggregate tests for a particular functionality:","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"using Test\n@testset \"Exercise 3\" begin\n    @test has_n(\"ACTGN\")\n    @test !has_n(\"ACTG\")\nend","category":"page"},{"location":"01_Introduction/#Material-1","page":"Introduction","title":"Material","text":"","category":"section"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"You can find more complete information about functions and control flow statements in the Julia manual.","category":"page"},{"location":"01_Introduction/#","page":"Introduction","title":"Introduction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"EditURL = \"https://github.com/diegozea/JuliaForBioinformatics/blob/master/src/Introduction/02_DataStructures.jl\"","category":"page"},{"location":"02_DataStructures/#Data-Structures-1","page":"Data Structures","title":"Data Structures","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"(Image: ) (Image: )","category":"page"},{"location":"02_DataStructures/#Arrays-1","page":"Data Structures","title":"Arrays","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Julia has a nice and flexible array interface. Arrays can have an arbitrary number of dimensions. Let's define a one-dimetional array (i.e. a vector):","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"vector = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"The first index of an array in Julia is 1:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"vector[1]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can use end to access the last element of an array:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"vector[end]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Use ranges (start:end) to get a slice of the array:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"vector[2:4]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Ranges in Julia are iterable objects:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"indexes = 2:4","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"for i in indexes\n\t@show i\nend","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Julia arrays, like the strings and ranges, are also iterables:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"for element in vector\n\tprintln(element)\nend","category":"page"},{"location":"02_DataStructures/#Exercise-1-1","page":"Data Structures","title":"Exercise 1","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Write a function to return the distance between two three dimensional points, i.e. two vector of three elements. You should use a for loop over a range and index the vectors.","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"# function distance(a, b...","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"using Test\nA = [1.25, 2.0, 3.6]\nB = [-3.5, 4.7, 5.0]\n@test distance(A, B) ≈ hypot((A - B)...)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"... \"splats\" the values contained in an iterable collection into a function call as individual arguments, e.g:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"vector = [1, 2, 3]\nhypot(vector...)  # hypot(1, 2, 3)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can use push! to add one element to the end of an array","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"vector = [1,2,3]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"push!(vector, 4)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"There are other useful dequeues functions defined in Julia, e.g. pop!, append!.","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"In Julia, by convention, all the functions that modify their arguments should end with a bang or exclamation mark, !, see the style guide.","category":"page"},{"location":"02_DataStructures/#Vectorized-operations-1","page":"Data Structures","title":"Vectorized operations","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can use a dot, .,  to indicate that a function, e.g. log.(x), or operator, e.g. x .^ y,  should be applied element by element, see dot syntax:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"a = [1, -2, -3]\nb = [-2, -4, 0]\na .* b","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"This notation allows vectorizing any function, even element-wise functions defined by the user:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"f(x) = 3.45x + 4.76\n\nf.(sin.(a))","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Multiple vectorized operations get fused in a single loop without temporal arrays.","category":"page"},{"location":"02_DataStructures/#Comprehensions-1","page":"Data Structures","title":"Comprehensions","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can use comprehensions to create arrays and perform some operation","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"[ 2x for x in 1:10 ]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"result = [ 2x for x in 1:10 if x % 2 == 0 ]","category":"page"},{"location":"02_DataStructures/#Exercise-3-1","page":"Data Structures","title":"Exercise 3","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Write the equivalent of the previous expression using a for loop and push!.","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"# result = []\n# for ...","category":"page"},{"location":"02_DataStructures/#Matrices-1","page":"Data Structures","title":"Matrices","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Matrices, bidimentional arrays, can be defined with the following notation:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"matrix = [ 1.0 4.0 7.0\n           2.0 5.0 8.0\n\t\t   3.0 6.0 9.0 ]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can use linear indexing (Julia arrays are stored in column major order) to access an element","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"matrix[2]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Or using one index by dimension, i.e. matrix[row_index, col_index] :","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"matrix[2, 1]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can also use ranges and end. The colon, :, means that all the indices from that dimension should be used:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"matrix[2:end, :]","category":"page"},{"location":"02_DataStructures/#Comprehensions-2","page":"Data Structures","title":"Comprehensions","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can also use comprehensions to create matrices. In fact, you can create array of any desired dimension:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"[ x + y for x in 1:5, y in 1:10 ]","category":"page"},{"location":"02_DataStructures/#Dictionaries-and-pairs-1","page":"Data Structures","title":"Dictionaries and pairs","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Dictionaries (hash tables) stores key => values pairs:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"dictionary = Dict('A' => 'T', 'C' => 'G', 'T' => 'A', 'G' => 'C')","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can get a value by indexing with the key:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"dictionary['A'] # get(dictionary, 'A')","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"If the key is not present in the dictionary, an error is raised:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"dictionary['N'] # get(dictionary, 'N')","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"The function get allows to specify a default value that is returned if the key is absent in the dictionary:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"get(dictionary, 'N', '-')","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"A nice thing about hash tables (dictionary keys, sets) is that test membership is O(1) while it is O(N) in lists/vectors/arrays:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"'N' in keys(dictionary)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"A dictionary gives pairs when it is iterated:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"for pair in dictionary\n\tprintln(\"pair: \", pair)  # each pair is key => value\n\tprintln(\"key: \", pair.first)  # pair.first == pair[1]\n\tprintln(\"value: \", pair.second)  # pair.second == pair[2]\nend","category":"page"},{"location":"02_DataStructures/#Tuples-1","page":"Data Structures","title":"Tuples","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Tuples are immutable collections, while arrays are mutable:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"point = [1.0, 2.0, 3.0]  # vector\npoint[1] = 10.0\npoint","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"point = (1.0, 2.0, 3.0)  # tuple","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"point[1] = 10.0","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can index a tuple, like a vector, to get the stored element(s):","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"point[1:2]","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Tuples, vectors, pairs and other iterables can be easily unpacked using an assignation:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"x, y, z = point\ny","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can use this unpacking when iterating a dictionary:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"for (key, value) in dictionary\n\tprintln(\"key: \", key, \" value: \", value)\nend","category":"page"},{"location":"02_DataStructures/#Exercise-3-2","page":"Data Structures","title":"Exercise 3","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Write a function to return the reverse complement of a DNA sequence (string) using a dictionary, the join function and the Base.Iterators.reverse iterator. It should use a 'N' as complementary of any base different from 'A', 'C', 'T' or 'G':","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"# function reverse_complement(...","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"using Test\n@test reverse_complement(\"ACTGGTCCCNT\") == \"ANGGGACCAGT\"","category":"page"},{"location":"02_DataStructures/#Named-tuples-1","page":"Data Structures","title":"Named tuples","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"They can be an easy and fast way to store data:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"point = (x=1.0, y=2.0, z=3.0)  # named tuple","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can use namedtuple.name to access a particular element:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"point.y","category":"page"},{"location":"02_DataStructures/#Sets-1","page":"Data Structures","title":"Sets","text":"","category":"section"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can use Set to represent a set of unique elements:","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"set = Set([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"Test membership is O(1)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"4 in set","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"You can get the intersection of two sets using intersect or ∩ (\\cap<TAB>)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"set_a = Set([1, 2, 3])\nset_b = Set([2, 3, 4])\nset_a ∩ set_b  # intersect(set, set_b)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"And the unioin of to sets using union or ∪ (\\cup<TAB>)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"set_a ∪ set_b  # union(set, set_b)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"The symmetric difference, i.e. disjunctive union, of two sets","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"symdiff(set_a, set_b)","category":"page"},{"location":"02_DataStructures/#","page":"Data Structures","title":"Data Structures","text":"This page was generated using Literate.jl.","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"EditURL = \"https://github.com/diegozea/JuliaForBioinformatics/blob/master/src/Introduction/03_Files_Homework.jl\"","category":"page"},{"location":"03_Files_Homework/#HOMEWORK:-Working-with-Files-1","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"","category":"section"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"(Image: ) (Image: )","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"Often, bioinformatic pipelines imply to manipulate text files. Here, we are going to parse a very simple FASTA file just as an example.","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"There is a FASTA file in the data folder of this repo:","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"using  JuliaForBioinformatics\nrepo_path = pathof(JuliaForBioinformatics)","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"You can use joinpath and abspath to construct a path that works in all the operative systems:","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"data_path = abspath(repo_path, \"..\", \"..\", \"data\")","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"fasta_file = joinpath(data_path, \"O43521.fasta\")","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"You can use open with the do syntax to read or write a file in Julia:","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"open(fasta_file, \"r\") do file\n    for line in eachline(file)\n        println(line)\n    end\nend","category":"page"},{"location":"03_Files_Homework/#Homework-1","page":"HOMEWORK: Working with Files","title":"Homework","text":"","category":"section"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"Write a function to read the FASTA file into a dictionary from the sequence/isoform UniProt name, i.e. the one between |, to the sequence.","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"Hint! You can use the following functions:","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"split(\"1 2 3\", ' ')","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"startswith(\"Hello world!\", 'H')","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"strip(\"  Hello world!  \")","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"and string concatenation:","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"\"Hello \" * \"world!\"","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"# function read_fasta(...)\n#     ...\n# end","category":"page"},{"location":"03_Files_Homework/#","page":"HOMEWORK: Working with Files","title":"HOMEWORK: Working with Files","text":"This page was generated using Literate.jl.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"EditURL = \"https://github.com/diegozea/JuliaForBioinformatics/blob/master/src/Advance/04_HowJuliaWorks.jl\"","category":"page"},{"location":"04_HowJuliaWorks/#How-Julia-works?-1","page":"How Julia works?","title":"How Julia works?","text":"","category":"section"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"(Image: ) (Image: )","category":"page"},{"location":"04_HowJuliaWorks/#Type-system-1","page":"How Julia works?","title":"Type system","text":"","category":"section"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Until now, we have not used type annotations, but Julia has a rich type system. Julia is an optionally- and dynamically-typed programming language. That means that you can change the type of a variable...","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"a = 10\ntypeof(a)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"a = true\ntypeof(a)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"... and that type annotations are optional. You can use type annotations to:","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"make a program more robust (type checking)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"a::Bool # type assertion","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"a::Int","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"optimize code by giving a hint to the compiler\ndocumment the code and use multiple dispatch","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"# function_name(arg::ArgumentType)::ReturnType = function_body\nfirst_character(str::AbstractString)::Char = str[1]","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"character = first_character(\"ABC\")","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"character = first_character(10_000)","category":"page"},{"location":"04_HowJuliaWorks/#Type-hierarchy-1","page":"How Julia works?","title":"Type hierarchy","text":"","category":"section"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Any Julia object has a type that belongs to a fully connected type graph. There are abstract and concrete types. Concrete types are final, i.e. they cannot have subtypes, while abstract types can have multiple subtypes but only one supertype.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"using JuliaForBioinformatics\nshow_type_tree(Number)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"In Julia, all values are instances of the abstract type Any.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"The functions supertype and subtypes are useful to navegate the type graph.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"supertype(Real)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"subtypes(Real)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"You can use isa to test if an object is of a given type","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"isa(\"I'm a string\", String)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"And the subtype operator <: to test if a type is a subtype of another","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"String <: AbstractString","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"You can also use Union of types, for example, if the possible types don't share a meaningful supertype","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"String <: Union{AbstractString, AbstractChar}","category":"page"},{"location":"04_HowJuliaWorks/#Multiple-dispatch-1","page":"How Julia works?","title":"Multiple dispatch","text":"","category":"section"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"We can define multiple methods for a function by using different method signatures by indicating the argument types using :: or <:.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"For example we are going to define 3 methods for the function say_my_type:","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"say_my_type(x) = println(x, \" is a \", typeof(x))\n# say_my_type(x) is the same that say_my_type(x::Any)\n\nsay_my_type(x::Real) = println(x, \" is a Real number of type \",  typeof(x))\nsay_my_type(x::Float64) = println(x, \" is a Float64 number\")","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"When the function is called, Julia selects the method with the most specific method signature.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"say_my_type('A') # 'A' is a Char, a subtype of Any\nsay_my_type(2) # 2 is an Int, a subtype of Real\nsay_my_type(2.0)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"say_my_type(x::Real) can also be written using the where keyword as","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"say_my_type(x::T) where {T <: Real} = println(x, \" is a Real number of type \",  T)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"methods(say_my_type)","category":"page"},{"location":"04_HowJuliaWorks/#Parametric-types-1","page":"How Julia works?","title":"Parametric types","text":"","category":"section"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Julia types can have parameters. We have already used parametric types, one of them is Array:","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"three_d_array = zeros(Int, 4, 3, 2)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"typeof(three_d_array)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Julia Arrays take two parameters, the type of the elements stored in the array and the array dimensions.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"This allows to write specific methods depending on those parameters","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"say_my_type(x::Array{T, 1}) where {T} = println(x, \" is vector with \",  T, \" elements\")\nsay_my_type(x::Array{T, 2}) where {T} = println(x, \" is matrix with \",  T, \" elements\")","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"say_my_type(Rational[0.5, 1, 1.5])\nsay_my_type(Float64[1 3 5; 2 4 6])","category":"page"},{"location":"04_HowJuliaWorks/#Exercise-1-1","page":"How Julia works?","title":"Exercise 1","text":"","category":"section"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Add a method to say_my_type that prints the number of unique values of an array of characters or strings and its dimensions. Hint: You can use the unique function.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"# ... println(x, \" is a text array with ... dimensions and ... unique values of type ...","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"That means that the function call:","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"test_array = ['a', 'b', 'b']\nsay_my_type(test_array)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Should print something like:","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"['a', 'b', 'b'] is a text array with 1 dimensions and 2 unique values of type Char","category":"page"},{"location":"04_HowJuliaWorks/#Which-method-is-being-used?-1","page":"How Julia works?","title":"Which method is being used?","text":"","category":"section"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"You can use the @which macro to ask Julia which method is being used","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@which say_my_type(2 + 0im)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@which say_my_type(2.0)","category":"page"},{"location":"04_HowJuliaWorks/#Julia-compiler-1","page":"How Julia works?","title":"Julia compiler","text":"","category":"section"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Julia uses Just-in-time (JIT) compilation to achieve close to C performance. After selecting the most specific method, Julia (generally) compiles the method for the particular argument types.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"For this reason, the first time a function is called, it is compiled (slow). If you call the same function a second time with the same argument types, it will use the already compiled code (fast).","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@time sum(1:10_000)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@time sum(1:10_000)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"While compilation times can be annoying sometimes, this mechanism allows Julia generality, composability and its capacity to generate efficient code for user-defined types. That's mean that you do not need to use built-in types or functions or to code some parts in C/Fortran to get a good performance like in other high-level languages.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Also, Julia represents its own code as a Julia data structure. This allows a program to transform and generate its own code, using macros and generated functions, for example, and powerful reflection capabilities to explore the internals of a program. You can read the metaprogramming section of the manual to learn more about this topic.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"##?@elapsed","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"macroexpand(Main, :(@elapsed sum(1:10_000)))","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"(Image: )","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"function sum_numbers(vector)\n    total = 0\n    for value in vector\n        total += value\n    end\n    total\nend","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"To avoid performance issues for using a global variable we are going to define it as a constant using the const keyword.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"const rand_vector = rand(5)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@code_lowered sum_numbers(rand_vector)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@code_typed sum_numbers(rand_vector)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@code_warntype sum_numbers(rand_vector)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@code_llvm sum_numbers(rand_vector)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@code_native sum_numbers(rand_vector)","category":"page"},{"location":"04_HowJuliaWorks/#Exercise-2-1","page":"How Julia works?","title":"Exercise 2","text":"","category":"section"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Modify the sum_numbers function to make it type stable by using zero and eltype. Then compare the output of the previous @code_* macros.","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"function sum_numbers(vector)\n    total = 0\n    for value in vector\n        total += value\n    end\n    total\nend","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"Check that you don't have any warning in the output of @code_warntype:","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"@code_warntype sum_numbers(rand_vector)","category":"page"},{"location":"04_HowJuliaWorks/#","page":"How Julia works?","title":"How Julia works?","text":"This page was generated using Literate.jl.","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"EditURL = \"https://github.com/diegozea/JuliaForBioinformatics/blob/master/src/Advance/05_DefiningTypes.jl\"","category":"page"},{"location":"05_DefiningTypes/#Defining-your-own-types-1","page":"Defining your own types","title":"Defining your own types","text":"","category":"section"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"(Image: ) (Image: )","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"Julia user-defined types are as fast as built-in types. They are easy to define:","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"abstract type AbstractFeature end","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"struct Exon{T} <: AbstractFeature where {T <: Integer}\n\tstart::T\n\tstop::T\nend","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"Exon(5, 10)","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"mutable struct MessengerRNA\n\tsequence::Vector{Char}\n\texons::Vector{Exon}\n\tpresent::Vector{Bool}\nend","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"mRNA = MessengerRNA(collect(\"ACTGTTGCATTGCAATTTAAGCAATGGCAAATAACATA\"),\n\t\t\t\t\t[Exon(5,10), Exon(20,28), Exon(30,34)],\n\t\t\t\t\t[true, false, true])","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"You can access type fields using a dot:","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"mRNA.exons","category":"page"},{"location":"05_DefiningTypes/#Exercise-1-1","page":"Defining your own types","title":"Exercise 1","text":"","category":"section"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"Define a function that takes a MessengerRNA object and return a list with the sequences (as strings) of the exons present in the transcript, i.e. [\"TTGCAT\", \"AATAA\"]","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"# ... your function here ...","category":"page"},{"location":"05_DefiningTypes/#","page":"Defining your own types","title":"Defining your own types","text":"This page was generated using Literate.jl.","category":"page"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"EditURL = \"https://github.com/diegozea/JuliaForBioinformatics/blob/master/src/Advance/06_Strings.jl\"","category":"page"},{"location":"06_Strings/#Working-with-Strings-1","page":"Working with Strings","title":"Working with Strings","text":"","category":"section"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"(Image: ) (Image: )","category":"page"},{"location":"06_Strings/#Regex-1","page":"Working with Strings","title":"Regex","text":"","category":"section"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"You can also use regular expressions. They are very useful to parse text files.","category":"page"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"line = \">sp|O43521|B2L11_HUMAN Bcl-2-like protein 11 OS=Homo sapiens OX=9606 GN=BCL2L11 PE=1 SV=1\"","category":"page"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"regex = r\"^>\\w+\\|(\\w+)\\|\"","category":"page"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"m = match(regex, line)","category":"page"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"if m !== nothing\n    println(m[1])\nend","category":"page"},{"location":"06_Strings/#String-interpolation-1","page":"Working with Strings","title":"String interpolation","text":"","category":"section"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"You can interpolate values, single variables or the result of more complex expressions, into strings using $:","category":"page"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"a = 1\nb = 2\n\"$a + $b is $(a + b)\"","category":"page"},{"location":"06_Strings/#","page":"Working with Strings","title":"Working with Strings","text":"This page was generated using Literate.jl.","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"EditURL = \"https://github.com/diegozea/JuliaForBioinformatics/blob/master/src/Advance/07_Stats.jl\"","category":"page"},{"location":"07_Stats/#Statistics-1","page":"Statistics","title":"Statistics","text":"","category":"section"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"(Image: ) (Image: )","category":"page"},{"location":"07_Stats/#Missing-values-1","page":"Statistics","title":"Missing values","text":"","category":"section"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"Julia, like R, has a value to represent missing values:","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"data = [ 1.0, 2.0, missing, 4.0 ]","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"This value implements three-valued logic:","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"false & missing","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"true & missing","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"You can use ismissing or skipmissing when necessary:","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"sum(data)","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"ismissing.(data)","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"sum(data[.!(ismissing.(data))])","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"sum(skipmissing(data))","category":"page"},{"location":"07_Stats/#DataFrames-1","page":"Statistics","title":"DataFrames","text":"","category":"section"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"It is very useful to work with tabular data. One of the most simplest Julia packages for that is DataFrames.","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"using DataFrames","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"To read this kind of files, you can use the CSV package.","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"using CSV","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"For example, the pdb_chain_taxonomy.tsv.gz file that has a summary of the NCBI taxid(s), scientificname(s) and chain type for each PDB chain that has been processed in the SIFTS database. This table should be downloaded from the SIFTS site.","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"table_path = download(\n    \"ftp://ftp.ebi.ac.uk/pub/databases/msd/sifts/flatfiles/tsv/pdb_chain_taxonomy.tsv.gz\",\n    \"pdb_chain_taxonomy.tsv.gz\")\n\nrun(`gunzip $table_path`)","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"If that fails, you can use the first lines stored in the data folder:","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"using  JuliaForBioinformatics\ndata_path = abspath(pathof(JuliaForBioinformatics), \"..\", \"..\", \"data\")\ntable_path = joinpath(data_path, \"pdb_chain_taxonomy_head.tsv\")","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"df = CSV.read(\"pdb_chain_taxonomy.tsv\",\n    header = 2,  ## the header is in the second line\n    delim = '\\t',  ## delimiter is TAB instead of ','\n    quotechar='`'  ## file don't use \"\" to quote, e.g.: \"Bacillus coli\" Migula 1895\n    )","category":"page"},{"location":"07_Stats/#Examples-1","page":"Statistics","title":"Examples","text":"","category":"section"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"Select human PDB chains:","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"df[:TAX_ID] .== 9606","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"df[df[:TAX_ID] .== 9606, [:PDB, :CHAIN]] |> unique","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"You can use |> for easy function chaining.","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"What are the species with more PDB chains?","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"count_df = by(df, :TAX_ID, Count = :TAX_ID => length)\nsort!(count_df, :Count, rev=true)","category":"page"},{"location":"07_Stats/#Exercice-1-1","page":"Statistics","title":"Exercice 1","text":"","category":"section"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"What are the species with more PDBs (not PDB chains)?","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"Hint: You can use anonymous functions:","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"f(x) = 2x + 1\ng(x) = sin(π*x)","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"x -> f(g(x))","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"or function composition (using ∘, \\circ<TAB>):","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"f ∘ g","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"# ...your solution...","category":"page"},{"location":"07_Stats/#","page":"Statistics","title":"Statistics","text":"This page was generated using Literate.jl.","category":"page"}]
}
